version: "3.8"

services:
  nginx-proxy:
    image: nginxproxy/nginx-proxy:alpine
    container_name: nginx-proxy
    labels:
      # allow letsencrypt to discover nginx service it paired up with
      - com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - certs:/etc/nginx/certs:ro
      - vhostd:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
    environment:
      - ENABLE_IPV6=true
    networks:
      acosta-rep-network:
        aliases:
          - nginxProxy

  letsencrypt:
    image: nginxproxy/acme-companion
    container_name: nginx-proxy-acme
    restart: always
    environment:
      - NGINX_PROXY_CONTAINER=nginx-proxy
      - DEFAULT_EMAIL=${LETSENCRYPT_EMAIL_MAIN}
      - DHPARAM_GENERATION=false
    volumes:
      - certs:/etc/nginx/certs:rw
      - acme:/etc/acme.sh
      - vhostd:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - nginx-proxy
    networks:
      acosta-rep-network:
        aliases:
          - letsencrypt

  postgres-db:
    image: postgres:15.4-alpine3.17
    container_name: postgres
    restart: always
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - ../database_structure.sql:/docker-entrypoint-initdb.d/01_database_structure.sql
      - ../database_data.sql:/docker-entrypoint-initdb.d/02_database_data.sql
      - postgres-data:/var/lib/postgresql/data/
    networks:
      acosta-rep-network:
        aliases:
          - postgres-db

  nestjs-app:
    build:
      context: ../../ # Path to the directory containing the Dockerfile
      dockerfile: Dockerfile
    container_name: nestjs
    restart: always
    expose:
      - "3000"
    volumes:
      - ../../BACK_UPS:/usr/app/src/KEEP_TRACK:rw
    environment:
      - VIRTUAL_HOST=${VIRTUAL_HOST_MAIN}
      - LETSENCRYPT_HOST=${LETSENCRYPT_HOST_MAIN}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL_MAIN}
    networks:
      acosta-rep-network:
        aliases:
          - nestjs-app
    depends_on:
      - nginx-proxy
      - letsencrypt
      - postgres-db
    env_file:
      - ../../.env

  hasura:
    image: hasura/graphql-engine:v2.36.1
    restart: always
    expose:
      - "8080"
    environment:
      - HASURA_GRAPHQL_DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-db:5432/postgres
      - DB_URL_FROM_ENV=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-db:5432/postgres
      - HASURA_GRAPHQL_ENABLE_CONSOLE="true" # Enabling Hasura Console (for development purposes)
      - HASURA_GRAPHQL_ADMIN_SECRET=${HASURA_ADMIN_SECRET_KEY}
      - HASURA_GRAPHQL_V1_BOOLEAN_NULL_COLLAPSE=true
      - HASURA_GRAPHQL_CORS_DOMAIN=${HASURA_CORS_DOMAIN}
      - HASURA_GRAPHQL_JWT_SECRET=${HASURA_JWT_SECRET}
      - VIRTUAL_HOST=${SUBDOMAIN_HASURA}
      - LETSENCRYPT_HOST=${SUBDOMAIN_HASURA}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL_MAIN}
    volumes:
      - ../hasura-metadata.json:/hasura_metadata.json
    networks:
      - acosta-rep-network
    depends_on:
      - nginx-proxy
      - letsencrypt
      - postgres-db

volumes:
  certs:
  html:
  acme:
  vhostd:
  postgres-data:

networks:
  acosta-rep-network:
    name: acosta_rep_net
    driver: bridge
    ipam:
      driver: default
